---
## general
spamassassin_user: debian-spamd
spamassassin_group: debian-spamd
spamassassin_home_dir: /var/lib/spamassassin
spamassassin_log_dir: /var/log/spamassassin
spamassassin_syslog_facility: "{{ spamassassin_log_dir }}/spamd.log"

# Write spamassassin config files (only install spamassassin and configure
# cronjob if set to False)
spamassassin_configure: True

## file: /etc/default/spamassassin

spamassassin_automatic_rule_update_enabled: true
spamassassin_nice_level: 0
spamassassin_pidfile: /var/run/spamd.pid

## file: /etc/spamassassin/local.cf

# Rewrite the mail header?
spamassassin_rewrite_header_enabled: false
spamassassin_rewrite_header: "Subject *****SPAM*****"

# Allowed 0, 1, 2 see
# https://spamassassin.apache.org/full/3.0.x/dist/doc/Mail_SpamAssassin_Conf.html
spamassassin_report_safe: 0

# Set the score required before a mail is considered spam
spamassassin_required_score: 5.0

# Whether to use the naive-Bayesian-style classifier built into SpamAssassin.
spamassassin_use_bayes: 1

# Whether to use rules using the naive-Bayesian-style classifier
# built into SpamAssassin.
spamassassin_bayes_auto_learn: 1

# Where to store bayes db
spamassassin_bayes_path: "{{ spamassassin_home_dir }}/bayes_db"

# Permissions of bayes_db files
spamassassin_bayes_file_mode: "0777"

# What networks or hosts are 'trusted' in your setup.
spamassassin_trusted_networks: []

# Tells SpamAssassin whether DNS resolving is available or not. A value yes
# indicates DNS resolving is available, a value no indicates DNS resolving is
# not available - both of these values apply unconditionally and skip initial
# DNS tests, which can be slow or unreliable.
# When the option value is a test (with or without arguments), SpamAssassin
# will query some domain names on the internet during initialization,
# attempting to determine if DNS resolving is working or not. A space-separated
# list of domain names may be specified explicitly, or left to a built-in
# default of a dozen or so domain names. From an explicit or a default list a
# subset of three domain names is picked randomly for checking. The test
# queries for NS records of these domain: if at least one query returns a
# success then SpamAssassin considers DNS resolving as available, otherwise
# not.
# The problem is that the test can introduce some startup delay if a network
# connection is down, and in some cases it can wrongly guess that DNS is
# unavailable because a test connection failed, what causes disabling several
# DNS-dependent tests.
# Please note, the DNS test queries for NS records, so specify domain names,
# not host names.
# Since version 3.4.0 of SpamAssassin a default setting for option
# dns_available is yes. A default in older versions was test.
# Quotes are important, don't miss them!
spamassassin_dns_available: "yes"

# Specifies an IP address of a DNS server, and optionally its port number. The
# dns_server directive may be specified multiple times, each entry adding to a
# list of available resolving name servers. The ip-addr-port argument can
# either be an IPv4 or IPv6 address, optionally enclosed in brackets, and
# optionally followed by a colon and a port number. In absence of a port number
# a standard port number 53 is assumed. When an IPv6 address is specified along
# with a port number, the address must be enclosed in brackets to avoid parsing
# ambiguity regarding a colon separator. A scoped link-local IP address is
# allowed (assuming underlying modules allow it).
# spamassassin_dns_servers:
#   - 127.0.0.1
#   - 127.0.0.1:53
#   - [127.0.0.1]:53
#   - [::1]:53
#   - fe80::1%lo0
#   - [fe80::1%lo0]:53
# In absence of dns_server directives, the list of name servers is provided by
# Net::DNS module, which typically obtains the list from /etc/resolv.conf, but
# this may be platform dependent. Please consult the Net::DNS::Resolver
# documentation for details.
spamassassin_dns_servers: []
  
# Allowed: nfsafe, flock, win32
spamassassin_lock_method: flock

# If you receive mail filtered by upstream mail systems,
# like a spam-filtering ISP or mailing list,
# and that service adds new headers (as most of them do),
# these headers may provide inappropriate cues
# to the Bayesian classifier, allowing it to take a
# ``short cut''. To avoid this, list the headers using this setting.
spamassassin_bayes_ignore_header:
  - X-Bogosity
  - X-Spam-Flag
  - X-Spam-Status

# manual welcomelisting
spamassassin_welcomelist: []

# Add addtional update channels, which should be updates by the daily
# sa-update cronjob. E.g.:
# spamassassin_additional_update_channels:
#   - address: spamassassin.heinlein-support.de
#     gpg: no
spamassassin_additional_update_channels: []

# Enable additional pyzor check
spamassassin_pyzor_enabled: True

spamassassin_pyzor_config_dir: /etc/spamassassin/.pyzor

# Enable additional razor chek
spamassassin_razor_enabled: True

spamassassin_razor_config_dir: /etc/spamassassin/.razor

# Enable monit monitoring
spamassassin_monit_enabled: False

# Enable spam training by users and domain
# spamassassin_spamtraining_users:
#    - domain: myfirstdomain.org
#      users:
#       - admin
#       - foo
#    - domain: myseconddomain.org
#      users:
#       - admina
#       - foobar
spamassassin_spamtraining_users: []

# Set custom spamassassin scores
# spamassassin_custom_scores:
#    - name: SPF_FAIL
#      score: "0 1.5 0 0.919"
spamassassin_custom_scores: []

spamassassin_packages:
  - spamassassin
  - spamc
  - spamd
  - libmail-dmarc-perl
  - libmail-spf-perl
  - libmail-dkim-perl
